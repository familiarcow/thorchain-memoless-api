#!/usr/bin/env node
/**
 * Development setup script for THORChain Memoless API
 * Helps set up environment variables and initial configuration
 */

const fs = require('fs');
const path = require('path');
const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

function question(query) {
  return new Promise(resolve => rl.question(query, resolve));
}

async function setupEnvironment() {
  console.log('üöÄ THORChain Memoless API - Development Setup\n');
  
  const envPath = path.join(__dirname, '.env');
  const envExamplePath = path.join(__dirname, '.env.example');
  
  // Check if .env already exists
  if (fs.existsSync(envPath)) {
    console.log('‚ö†Ô∏è  .env file already exists!');
    const overwrite = await question('Do you want to overwrite it? (y/N): ');
    if (overwrite.toLowerCase() !== 'y' && overwrite.toLowerCase() !== 'yes') {
      console.log('‚úÖ Setup cancelled. Your existing .env file is unchanged.');
      rl.close();
      return;
    }
  }
  
  console.log('üìù Setting up environment configuration...\n');
  
  // Get user preferences
  console.log('üîß Configuration Questions:');
  console.log('   (Press Enter to use default values)\n');
  
  const network = await question('1. THORChain Network (stagenet/mainnet) [stagenet]: ') || 'stagenet';
  const port = await question('2. API Port [3000]: ') || '3000';
  
  console.log('\nüíæ Database Configuration:');
  console.log('   For development, SQLite is easier (no setup required)');
  console.log('   For production-like testing, use PostgreSQL');
  
  const dbType = await question('3. Database type (sqlite/postgresql) [sqlite]: ') || 'sqlite';
  
  let databaseUrl;
  if (dbType.toLowerCase() === 'postgresql' || dbType.toLowerCase() === 'postgres') {
    const dbUser = await question('   PostgreSQL username [postgres]: ') || 'postgres';
    const dbPass = await question('   PostgreSQL password: ');
    const dbHost = await question('   PostgreSQL host [localhost]: ') || 'localhost';
    const dbPort = await question('   PostgreSQL port [5432]: ') || '5432';
    const dbName = await question('   Database name [thorchain_memoless]: ') || 'thorchain_memoless';
    
    databaseUrl = `postgresql://${dbUser}:${dbPass}@${dbHost}:${dbPort}/${dbName}`;
  } else {
    const dbFile = await question('   SQLite file path [./dev-database.db]: ') || './dev-database.db';
    databaseUrl = `sqlite:${dbFile}`;
  }
  
  console.log('\nüîë Hot Wallet Configuration:');
  console.log('   ‚ö†Ô∏è  IMPORTANT: Never use a real wallet with funds for development!');
  console.log('   The default mnemonic is safe for development (no real funds)');
  
  const useDefaultMnemonic = await question('4. Use default development mnemonic? (Y/n): ') || 'y';
  let hotWalletMnemonic;
  
  if (useDefaultMnemonic.toLowerCase() === 'n' || useDefaultMnemonic.toLowerCase() === 'no') {
    console.log('   Generate a new mnemonic at: https://iancoleman.io/bip39/');
    hotWalletMnemonic = await question('   Enter your development mnemonic (12 words): ');
    
    if (!hotWalletMnemonic || hotWalletMnemonic.split(' ').length !== 12) {
      console.log('   ‚ö†Ô∏è  Invalid mnemonic. Using default development mnemonic.');
      hotWalletMnemonic = 'abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon about';
    }
  } else {
    hotWalletMnemonic = 'abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon about';
  }
  
  // Create .env content
  const envContent = `# THORChain Memoless API Configuration
# Generated by setup script on ${new Date().toISOString()}

# ===========================================
# REQUIRED ENVIRONMENT VARIABLES
# ===========================================

# Hot Wallet Configuration (REQUIRED)
HOT_WALLET_MNEMONIC="${hotWalletMnemonic}"

# Database Configuration (REQUIRED)
DATABASE_URL="${databaseUrl}"

# ===========================================
# NETWORK CONFIGURATION
# ===========================================

# THORChain Network (mainnet or stagenet)
THORCHAIN_NETWORK=${network}

# API Server Configuration
NODE_ENV=development
PORT=${port}

# ===========================================
# OPTIONAL CONFIGURATION
# ===========================================

# CORS Configuration
CORS_ORIGINS=http://localhost:${port},http://localhost:3001

# Rate Limiting
RATE_LIMIT=100

# Logging
LOG_LEVEL=info

# ===========================================
# DEVELOPMENT NOTES
# ===========================================
# - This configuration is for DEVELOPMENT only
# - Never use real funds with the hot wallet
# - Use stagenet for safety and cost savings
# - The API will create database tables automatically
# - Check SWAGGER_GUIDE.md for API documentation
`;
  
  // Write .env file
  fs.writeFileSync(envPath, envContent);
  
  console.log('\n‚úÖ Environment configuration created successfully!');
  console.log('üìÅ File created: .env');
  console.log('\nüöÄ Next steps:');
  console.log('   1. Start the development server: npm run dev');
  console.log('   2. Open Swagger UI: http://localhost:' + port + '/docs');
  console.log('   3. Test the health endpoint: http://localhost:' + port + '/health');
  
  if (dbType.toLowerCase() === 'postgresql') {
    console.log('\nüìä PostgreSQL Setup:');
    console.log('   Make sure PostgreSQL is running and the database exists:');
    console.log(`   createdb ${databaseUrl.split('/').pop()}`);
  }
  
  console.log('\n‚ö†Ô∏è  Important Security Notes:');
  console.log('   ‚Ä¢ Never commit the .env file to version control');
  console.log('   ‚Ä¢ Never use real funds with development wallets');
  console.log('   ‚Ä¢ Use stagenet for all development and testing');
  
  rl.close();
}

async function main() {
  try {
    await setupEnvironment();
  } catch (error) {
    console.error('‚ùå Setup failed:', error.message);
    rl.close();
    process.exit(1);
  }
}

if (require.main === module) {
  main();
}